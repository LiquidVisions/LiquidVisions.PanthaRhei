
        private static IServiceCollection Add{{entity.name}}(this IServiceCollection services)
        {
            // CREATE {{entity.name | string.upcase}}
            services.AddTransient<IInteractor<Create{{entity.name}}RequestModel>, Create{{entity.name}}Interactor>();
            services.AddTransient<IBoundary<Create{{entity.name}}RequestModel>, Create{{entity.name}}Boundary>();
            services.AddTransient<IValidator<Create{{entity.name}}RequestModel>, Create{{entity.name}}Validator>();

            // GET {{entity.pluralized_name | string.upcase}}
            services.AddTransient<IInteractor<Get{{entity.name | pluralize}}RequestModel>, Get{{entity.name | pluralize}}Interactor>();
            services.AddTransient<IBoundary<Get{{entity.name | pluralize}}RequestModel>, Get{{entity.name | pluralize}}Boundary>();
            services.AddTransient<IValidator<Get{{entity.name | pluralize}}RequestModel>, Get{{entity.name | pluralize}}Validator>();

            // GET {{entity.name | string.upcase}}
            services.AddTransient<IInteractor<Get{{entity.name}}ByIdRequestModel>, Get{{entity.name}}Interactor>();
            services.AddTransient<IBoundary<Get{{entity.name}}ByIdRequestModel>, Get{{entity.name}}ByIdBoundary>();
            services.AddTransient<IValidator<Get{{entity.name}}ByIdRequestModel>, Get{{entity.name}}ByIdValidator>();

            // DELETE {{entity.name | string.upcase}}
            services.AddTransient<IInteractor<Delete{{entity.name}}RequestModel>, Delete{{entity.name}}Interactor>();
            services.AddTransient<IBoundary<Delete{{entity.name}}RequestModel>, Delete{{entity.name}}Boundary>();
            services.AddTransient<IValidator<Delete{{entity.name}}RequestModel>, Delete{{entity.name}}Validator>();

            // UPDATE {{entity.name | string.upcase}}
            services.AddTransient<IInteractor<Update{{entity.name}}RequestModel>, Update{{entity.name}}Interactor>();
            services.AddTransient<IBoundary<Update{{entity.name}}RequestModel>, Update{{entity.name}}Boundary>();
            services.AddTransient<IValidator<Update{{entity.name}}RequestModel>, Update{{entity.name}}Validator>();

            // MAPPERS
            services.AddTransient<IMapper<Create{{entity.name}}RequestModel, {{entity.name}}>, Create{{entity.name}}RequestModelRequestModelMapper>();
            services.AddTransient<IMapper<Update{{entity.name}}RequestModel, {{entity.name}}>, Update{{entity.name}}RequestModelRequestModelMapper>();

            return services;
        }