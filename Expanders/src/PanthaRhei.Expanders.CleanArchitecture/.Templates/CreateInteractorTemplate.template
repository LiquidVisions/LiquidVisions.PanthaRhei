{{-
name = "Create" + entity.name;
class_name = name + "Interactor";
-}}
using System;
using System.Threading.Tasks;
using {{component_fullname component 'Gateways'}};
using {{component_fullname component 'Mappers'}};
using {{component_fullname component 'RequestModels' entity.name | pluralize}};
using {{component_fullname component 'Validators'}};
using {{entity.callsite}};

namespace {{component_fullname component 'Interactors' entity.name | pluralize}}
{
    internal class {{class_name}} : IInteractor<{{name}}Command>
    {
        private readonly IValidator<{{name}}Command> validator;
        private readonly IMapper<{{name}}Command, {{entity.name}}> mapper;
        private readonly ICreateGateway<{{entity.name}}> repository;

        public {{class_name}}(
            IValidator<{{name}}Command> validator,
            IMapper<{{name}}Command, {{entity.name}}> mapper,
            ICreateGateway<{{entity.name}}> gateway)
        {
            this.validator = validator;
            this.mapper = mapper;
            repository = gateway;
        }

        public async Task<Response> ExecuteUseCase({{name}}Command requestModel)
        {
            Response result = validator.Validate(requestModel);
            if (result.IsValid)
            {
                try
                {
                    {{entity.name}} entity = mapper.Map(requestModel);
                    entity.Id = Guid.NewGuid();

                    result.SetParameter(entity);

                    int repositoryResult = await repository.Create(entity);
                    if (repositoryResult != 1)
                    {
                        result.AddError(ErrorCodes.InternalServerError, $"Failed to create {nameof({{entity.name}})}.");
                        return result;
                    }
                }
                catch (Exception exception)
                {
                    result.AddError(ErrorCodes.InternalServerError, exception.Message);
                }
            }

            return result;
        }
    }
}
