using System;
using System.Linq;
using System.Threading.Tasks;
using {{usings}}.Application.Gateways;
using {{usings}}.Domain.Entities;
using Microsoft.EntityFrameworkCore;

namespace {{usings}}.Infrastructure.EntityFramework
{
    public class {{entity.name}}Repository : IGetGateway<{{entity.name}}>, IGetByIdGateway<{{entity.name}}>, ICreateGateway<{{entity.name}}>, IDeleteGateway<{{entity.name}}>, IUpdateGateway<{{entity.name}}>
    {
        private readonly Context context;

        public {{entity.name}}Repository(Context context)
        {
            this.context = context;
        }

        public async Task<int> Update({{entity.name}} entity)
        {
            
            context.Set<{{entity.name}}>().Add(entity);
            context.Entry(entity).State = EntityState.Modified;
            #region ns-custom-update
            #endregion ns-custom-update
            return await context.SaveChangesAsync();
            
        }

        public async Task<int> Create({{entity.name}} entity)
        {
            context.Set<{{entity.name}}>().Add(entity);
            context.Entry(entity).State = EntityState.Added;

            #region ns-custom-create
            #endregion ns-custom-create

            return await context.SaveChangesAsync();
            
        }

        public IQueryable<{{entity.name}}> Get()
        {
            IQueryable<{{entity.name}}> result = context.Set<{{entity.name}}>();

            #region ns-custom-get
            #endregion ns-custom-get

            return result;
        }

        public {{entity.name}} GetById(Guid id)
        {
            
            {{entity.name}} result = context.Set<{{entity.name}}>()
                .SingleOrDefault(x => x.Id == id);

            #region ns-custom-getbyid
            #endregion ns-custom-getbyid

            return result;
        }

        public async Task<bool> Delete({{entity.name}} entity)
        {
            context.Set<{{entity.name}}>().Remove(entity);
            context.Entry(entity).State = EntityState.Deleted;

            #region ns-custom-delete
            #endregion ns-custom-delete

            return await context.SaveChangesAsync() == 1;
        }

        public bool Exists(Guid id)
        {
            bool result = context.Set<{{entity.name}}>().Any(x => x.Id == id);

            #region ns-custom-exists
            #endregion ns-custom-exists

            return result;
        }
    }
}
